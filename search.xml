<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PX4仿真环境的搭建</title>
    <url>/2022/12/05/PX4%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="通过docker搭建比较推荐"><a class="markdownIt-Anchor" href="#通过docker搭建比较推荐"></a> 通过Docker搭建（比较推荐）</h1>
<blockquote>
<p>优点: 搭建方便, 可以轻松地在windows系统上运行, 开发与调试可以同平台进行</p>
<p>缺点: 性能损耗大(需要较高性能), gazebo模拟器没有图形化界面(其实无关紧要)</p>
<p>该教程适用于win11 (我自己的环境), win10自行探索</p>
</blockquote>
<h2 id="安装docker-desktop-for-windows"><a class="markdownIt-Anchor" href="#安装docker-desktop-for-windows"></a> 安装Docker Desktop for Windows</h2>
<h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3>
<ol>
<li>控制面板-程序和功能-启用或关闭Windows功能-勾选【适用于 Linux 的 Windows 子系统】和【虚拟机平台】这两项-立即重新启动；</li>
</ol>
<h3 id="安装wsl-2和ubuntu2004"><a class="markdownIt-Anchor" href="#安装wsl-2和ubuntu2004"></a> 安装WSL 2和Ubuntu20.04</h3>
<ol start="2">
<li>
<p>点击<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">这里</a>前往微软官方文档Step 4, 下载<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">WSL2 Linux kernel update package for x64 machines</a>内核升级包并安装.</p>
</li>
<li>
<p>设置WSL版本为WSL 2. 打开 PowerShell , 输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>
<p>查看可用ubuntu版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --list --online</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --install -d Ubuntu-20.04</span><br></pre></td></tr></table></figure>
<p>安装结束后设置你的Ubuntu用户名和密码, 即可关闭这个界面.</p>
</li>
</ol>
<h3 id="安装docker-desktop"><a class="markdownIt-Anchor" href="#安装docker-desktop"></a> 安装Docker Desktop</h3>
<ol start="4">
<li>
<p><a href="https://www.docker.com/get-started/">官网下载</a>, 然后双击运行安装即可.</p>
</li>
<li>
<p>设置里勾选 基于WSL 2的引擎</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205215205499.png" alt="image-20221205215205499" /></p>
</li>
<li>
<p>在PowerShell中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>
<p>可以发现docker已经在运行</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205215448505.png" alt="image-20221205215448505" /></p>
</li>
</ol>
<h2 id="安装px4仿真镜像"><a class="markdownIt-Anchor" href="#安装px4仿真镜像"></a> 安装PX4仿真镜像</h2>
<ol start="7">
<li>
<p>打开Docker Desktop, 并搜索 <code>px4-gazebo-headless</code>, 点击Pull拉取镜像.</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205220006231.png" alt="image-20221205220006231" /></p>
</li>
<li>
<p>拉取成功后, 即可打开Ubuntu20.04, 运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -it jonasvautherin/px4-gazebo-headless:latest -v plane </span><br></pre></td></tr></table></figure>
<blockquote>
<p>该命令为在Broadcast模式下运行sitl仿真, 并使用固定翼模型. 在此配置中, 容器将 MAVLink 发送到端口 14550（对于 QGC）和 14540（例如 MAVSDK）上的主机.</p>
</blockquote>
<p>看到如下画面, 即代表px4 SITL仿真已成功启动</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205220551641.png" alt="image-20221205220551641" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205220525084.png" alt="image-20221205220525084" /></p>
<p>打开QGC, 飞机即可自动连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205220648562.png" alt="image-20221205220648562" /></p>
<p>终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown</span><br></pre></td></tr></table></figure>
<p>即可结束仿真</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205221320196.png" alt="image-20221205221320196" /></p>
</li>
</ol>
<h1 id="自行搭建一般推荐"><a class="markdownIt-Anchor" href="#自行搭建一般推荐"></a> 自行搭建（一般推荐）</h1>
<blockquote>
<p>优点: 性能较好, gazebo模拟器有图形化界面(无关紧要), 可以增加Linux基础, 不用docker可以享受自己配环境的乐趣</p>
<p>缺点: 费时费力, 有docker为什么还要自己配环境()</p>
<p>此教程基于ubuntu20.04 (我的环境), 如果你是ubuntu18.04也可以参考<a href="https://github.com/Nangong-Yufeng/flight-control/blob/main/PX4%E7%9B%B8%E5%85%B3/PX4%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%E4%B8%8E%E5%BC%80%E5%8F%91%E8%BF%9B%E5%BA%A6.md">这里</a>. 或者你想<a href="https://docs.px4.io/main/zh/dev_setup/dev_env_linux_ubuntu.html#ubuntu-lts-debian-linux-%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">跟着PX4官方文档搭建环境</a></p>
<p>搭建环境时建议使用一个好用的梯子(既然你能看到这个文章说明这应该不是问题)</p>
</blockquote>
<h2 id="ros安装"><a class="markdownIt-Anchor" href="#ros安装"></a> ROS安装</h2>
<ol>
<li>
<p>首先安装ROS, 推荐使用<a href="https://fishros.org.cn/forum/topic/20/%E5%B0%8F%E9%B1%BC%E7%9A%84%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97?lang=zh-CN">FishRos</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros </span><br></pre></td></tr></table></figure>
<p>分别选择1, 3, 4 (配置环境需要用到的)</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221205222351336.png" alt="image-20221205222351336" /></p>
</li>
</ol>
<h2 id="px4安装"><a class="markdownIt-Anchor" href="#px4安装"></a> PX4安装</h2>
<ol start="2">
<li>
<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ninja-build exiftool ninja-build protobuf-compiler libeigen3-dev genromfs xmlstarlet libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev python-pip python3-pip</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install pandas jinja2 pyserial cerberus pyulog==0.7.0 numpy toml pyquaternion empy pyyaml </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install packaging numpy empy toml pyyaml jinja2 pyargparse</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建工作空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-catkin-tools</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/scripts</span><br><span class="line"><span class="built_in">cd</span> catkin_ws &amp;&amp; catkin init <span class="comment"># 使用catkin_make话，则为cd catkin_ws/src &amp;&amp; catkin_init_workspace</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装MAVROS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ros-noetic-mavros ros-noetic-mavros-extras   </span><br><span class="line">wget https://gitee.com/robin_shaun/XTDrone/raw/master/sitl_config/mavros/install_geographiclib_datasets.sh</span><br><span class="line">sudo <span class="built_in">chmod</span> a+x ./install_geographiclib_datasets.sh</span><br><span class="line">sudo ./install_geographiclib_datasets.sh <span class="comment">#这步需要装一段时间,请耐心等待PX4配置</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装PX4</p>
<p>推荐<a href="https://docs.px4.io/main/zh/dev_setup/dev_env_linux_ubuntu.html#%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC">官方脚本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PX4/PX4-Autopilot.git --recursive</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash ./PX4-Autopilot/Tools/setup/ubuntu.sh</span><br></pre></td></tr></table></figure>
<p>然后重启电脑</p>
</li>
<li>
<p>环境配置</p>
<p>打开一个终端, 输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>将下面代码粘贴到里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/PX4-Autopilot/Tools/simulation/gazebo/setup_gazebo.bash ~/catkin_ws/PX4-Autopilot/ ~/catkin_ws/PX4-Autopilot/build/px4_sitl_default</span><br><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:~/catkin_ws/PX4-Autopilot</span><br><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:~/catkin_ws/PX4-Autopilot/Tools/simulation/gazebo/sitl_gazebo</span><br></pre></td></tr></table></figure>
<p>保存退出后输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动仿真</p>
<p>新打开一个终端, 前往~/catkin_ws/PX4-Autopilot目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/PX4-Autopilot</span><br></pre></td></tr></table></figure>
<p>启动px4 sitl仿真, 机型为固定翼(plane)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make px4_sitl gazebo_plane</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221206185806648.png" alt="image-20221206185806648" /></p>
<p>当gazebo模拟器成功启动, 画面中出现小飞机, 终端出现类似这样的信息时</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221206185822088.png" alt="image-20221206185822088" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221206185835038.png" alt="image-20221206185835038" /></p>
<p>说明仿真启动成功, 此时控制台输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown</span><br></pre></td></tr></table></figure>
<p>即可退出仿真</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221206185924821.png" alt="image-20221206185924821" /></p>
</li>
</ol>
]]></content>
      <categories>
        <category>南工御风</category>
      </categories>
      <tags>
        <tag>px4</tag>
        <tag>ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>QA01</title>
    <url>/2023/07/03/QA01/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="qa01"><a class="markdownIt-Anchor" href="#qa01"></a> QA01</h1>
<h2 id="目标任务要求不够详细不知道是什么"><a class="markdownIt-Anchor" href="#目标任务要求不够详细不知道是什么"></a> 目标任务要求不够详细，不知道是什么</h2>
<blockquote>
<p>参考QQ群文件的“中国飞行器设计创新大赛规则（2023年).pdf -&gt;固定翼无人机侦察与打击 -&gt;5.竞赛方法”</p>
</blockquote>
<h3 id="56-a-b-两个机组同时上场-比赛计时指令发出时由参赛选手开启计时器然后携带任务箱从出发线行进至操纵区完成组装-调试和起飞-飞行器携带模拟弹飞离起降区即为起飞成功"><a class="markdownIt-Anchor" href="#56-a-b-两个机组同时上场-比赛计时指令发出时由参赛选手开启计时器然后携带任务箱从出发线行进至操纵区完成组装-调试和起飞-飞行器携带模拟弹飞离起降区即为起飞成功"></a> 5.6 A、B 两个机组同时上场。比赛计时指令发出时，由参赛选手开启计时器，然后携带任务箱从出发线行进至操纵区，完成组装、调试和起飞。飞行器携带模拟弹飞离起降区即为起飞成功。</h3>
<ul>
<li>在比赛开始后需完成飞行器飞控部分的启动，按照去年的说法就是：打开电脑、启动图传、运行比赛程序、在程序中看到飞行器状态ok后告诉队友，准备起飞。</li>
</ul>
<p>​	<img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20230507185941651.png" alt="飞行器状态ok，可以起飞" /></p>
<blockquote>
<p>图片来源：<a href="https://www.hanhan3344.top/">https://www.hanhan3344.top/</a> 顶栏→<a href="https://www.aliyundrive.com/s/YEEhfchRVAq">2022CADC_录屏 &amp;&amp; 图传资料</a>→录屏文件夹→Desktop 2022.11.30 - 15.01.28.02.mp4</p>
</blockquote>
<h3 id="57-参赛选手可自由选择自动或手动的方式起飞-若选择自动方式起飞须在飞行器起飞前将遥控器置于地面若选择手动方式起飞须在飞行器进入目标区之前将遥控器置于地面以确认自主飞行切换成功"><a class="markdownIt-Anchor" href="#57-参赛选手可自由选择自动或手动的方式起飞-若选择自动方式起飞须在飞行器起飞前将遥控器置于地面若选择手动方式起飞须在飞行器进入目标区之前将遥控器置于地面以确认自主飞行切换成功"></a> 5.7 参赛选手可自由选择自动或手动的方式起飞。若选择自动方式起飞，须在飞行器起飞前将遥控器置于地面；若选择手动方式起飞，须在飞行器进入目标区之前将遥控器置于地面，以确认自主飞行切换成功。</h3>
<ul>
<li>今年新增的加分项目，自动起飞，可以参考PX4 User Guide中的takeoff部分https://docs.px4.io/main/en/flight_modes/takeoff.html#fixed-wing-fw</li>
</ul>
<h3 id="58-飞行器执行侦察和打击任务时必须为自主飞行状态-侦察任务为-a-机组识别红色天井中的数字b-机组识别蓝色天井中的数字-完成侦察后对中位数所在的天井进行打击打击结果以模拟弹第一落点为准"><a class="markdownIt-Anchor" href="#58-飞行器执行侦察和打击任务时必须为自主飞行状态-侦察任务为-a-机组识别红色天井中的数字b-机组识别蓝色天井中的数字-完成侦察后对中位数所在的天井进行打击打击结果以模拟弹第一落点为准"></a> 5.8 飞行器执行侦察和打击任务时必须为自主飞行状态。侦察任务为 A 机组识别红色天井中的数字，B 机组识别蓝色天井中的数字。完成侦察后，对“中位数”所在的天井进行打击，打击结果以模拟弹第一落点为准。</h3>
<ul>
<li>
<p><mark>自主飞行状态</mark>意味着我们在<em>起飞后→降落前</em>不能通过电脑（或遥控器）再对飞机进行任何远程操作，所以编写程序要一步到位。</p>
</li>
<li>
<p><mark>识别天井中的数字</mark>：</p>
<ul>
<li>
<p>如何从图传传回来的视频流中识别天井中的数字呢？首先我们需要<strong>目标检测算法</strong>对图传视频画面进行实例分割，这样我们就能得到画面中的标靶部分。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20230507191406347.png" alt="image-20230507191406347" /></p>
<blockquote>
<p>图片来源：<a href="https://www.bilibili.com/video/BV1HP411T7C9/?spm_id_from=333.999.0.0&amp;vd_source=374b2a05cf4288dee623676fbe5a8ca6">去年比赛提交的视频</a>（地面端录制）那么目标检测算法从哪里来呢？<s>自己写一个</s>开源好用的yolov5就是</p>
</blockquote>
</li>
<li>
<p>那么目标检测算法从哪里来呢？<s>自己写一个</s><a href="https://github.com/ultralytics/yolov5">yolov5</a>就是一个开源又好用的目标检测（实例分割）算法</p>
<blockquote>
<p>我们新的 YOLOv5 <a href="https://github.com/ultralytics/yolov5/releases/v7.0">release v7.0</a> 实例分割模型是世界上最快和最准确的模型，击败所有当前 <a href="https://paperswithcode.com/sota/real-time-instance-segmentation-on-mscoco">SOTA 基准</a>。我们使它非常易于训练、验证和部署。更多细节请查看 <a href="https://github.com/ultralytics/yolov5/releases/v7.0">发行说明</a> 或访问我们的 <a href="https://github.com/ultralytics/yolov5/blob/master/segment/tutorial.ipynb">YOLOv5 分割 Colab 笔记本</a> 以快速入门。</p>
<p>——来自yolov5项目首页的介绍（<a href="http://readme.md">readme.md</a>）</p>
</blockquote>
</li>
<li>
<p>在将标靶部分从视频帧中分离出来后，标靶的数字又该怎么识别呢？<s>自己写一个</s><a href="https://github.com/PaddlePaddle/PaddleOCR">paddleocr</a>就是一个开源又好用的ocr（Optical Character Recognition，光学字符识别）工具</p>
</li>
</ul>
</li>
<li>
<p>在解决了以上问题后，我们现在已经可以获得标靶中的数字，我们将得到的三个数字比较一下，算出中位数，然后我们再通过捕获帧中中位数标靶的像素位置，通过与飞机传回的GPS位置做比对，计算得出中位数标靶的GPS位置（<strong>TODO</strong>）。</p>
</li>
<li>
<p>在计算出中位数标靶的GPS坐标后，我们就可以让飞机自动进入投弹模式，在去年的程序中，程序将会控制飞机取消正在进行的侦察mission，并生成一个包含中位数标靶的GPS坐标的投弹mission发送给飞机执行。</p>
</li>
</ul>
<h3 id="59-参赛选手可自由选择自动或手动的方式着陆-若选择自动方式着陆在飞行器着陆且完全静止后方能拿起遥控器若选择手动方式降落在侦察与打击任务完成后方能拿起遥控器操纵飞行器返航着陆"><a class="markdownIt-Anchor" href="#59-参赛选手可自由选择自动或手动的方式着陆-若选择自动方式着陆在飞行器着陆且完全静止后方能拿起遥控器若选择手动方式降落在侦察与打击任务完成后方能拿起遥控器操纵飞行器返航着陆"></a> 5.9 参赛选手可自由选择自动或手动的方式着陆。若选择自动方式着陆，在飞行器着陆且完全静止后方能拿起遥控器；若选择手动方式降落，在侦察与打击任务完成后方能拿起遥控器，操纵飞行器返航着陆。</h3>
<ul>
<li>自动着陆，新增加分项，参考PX4 User Guide中的land部分https://docs.px4.io/main/en/flight_modes/land.html#fixed-wing-fw</li>
</ul>
<h2 id="怎么去了解学习具体途径"><a class="markdownIt-Anchor" href="#怎么去了解学习具体途径"></a> 怎么去了解学习（具体途径）</h2>
<h3 id="yolov5"><a class="markdownIt-Anchor" href="#yolov5"></a> yolov5</h3>
<ul>
<li>
<p><a href="https://github.com/ultralytics/yolov5/blob/master/README.zh-CN.md">官方的简体中文文档</a>。其中有详细的安装、推理、训练等教程</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20230507193632234.png" alt="yolov5官方教程" /></p>
</li>
</ul>
<h3 id="paddleocr"><a class="markdownIt-Anchor" href="#paddleocr"></a> paddleocr</h3>
<ul>
<li><a href="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/README_ch.md">官方的简体中文文档</a>。里面有更详细的安装、推理、训练教程，推荐看<a href="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.6/doc/doc_ch/quickstart.md">一行命令快速使用</a>部分（不是只看这部分）</li>
</ul>
<h3 id="px4-mavsdk"><a class="markdownIt-Anchor" href="#px4-mavsdk"></a> PX4 &amp;&amp; mavsdk</h3>
<ul>
<li>
<p>PX4是一个飞控的系统，就好像你的电脑有windows、linux、mac系统，手机有Android、IOS系统，飞控也有一个开源系统叫PX4。</p>
</li>
<li>
<p>mavsdk是一个PX4的api，我们想要让飞行器实现自动飞行、自主完成任务、并且与自制的标靶识别功能完美融合，仅仅使用市面上的QGC等地面站软件是做不到的，但是不用QGC等地面站软件我们该怎么控制飞机呢？（你最好知道QGC是可以操控飞机完成一些自动飞行任务的😅）PX4的mavsdk就给我们创造了途径。那么mavsdk和px4有什么关系呢？在PX4 User Guide的<a href="https://docs.px4.io/main/en/robotics/dronekit.html#dronekit">Drone kit</a>目录中就有说明。（想必大家都是熟读过PX4 User Guide的🤣）</p>
<blockquote>
<p>不再推荐使用 DroneKit。</p>
<p>你应该改用<a href="https://mavsdk.mavlink.io/">MAVSDK （打开新窗口）</a>使用 PX4，因为它几乎在所有方面都更好：功能、速度、编程语言支持、维护等。</p>
<p><s>可以在此处找到有关将 DroneKit 与 PX4 结合使用的文档：<a href="https://docs.px4.io/v1.12/en/robotics/dronekit.html">PX4 v1.12 &gt; DroneKit （打开新窗口）</a>.</s></p>
</blockquote>
<p>我们打开MAVSDK的链接，来到MAVSDK的官网，可以看到MAVSDK的介绍</p>
<blockquote>
<p><em>MAVSDK</em>是各种编程语言的库集合，用于与<a href="https://mavlink.io/en/">MAVLink</a>系统（如无人机、相机或地面系统）接口。</p>
<p>这些库提供了一个简单的 API，用于管理一个或多个车辆，提供对车辆信息和遥测的编程访问，以及对任务、移动和其他操作的控制。</p>
<p>这些库可以在无人机上的配套计算机上使用，也可以在地面上用于地面站或移动设备。</p>
<p>MAVSDK 是跨平台的：Linux、macOS、Windows、Android 和 iOS。</p>
</blockquote>
<p>意思就是我们可以用它提供的api，通过python等编程语言，在pc上直接与飞控交互，用来控制飞行器、获取飞行器信息等。那么我们该怎么使用呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20230507195142210.png" alt="image-20230507195142210" /></p>
<p>点击进入python的页面中，在这里有两个选项</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20230507195237518.png" alt="image-20230507195237518" /></p>
<p>点击第一个<a href="https://mavsdk.mavlink.io/main/en/python/quickstart.html">Python QuickStart</a>我们可以进入Python QuickStart，里面有从安装到在模拟器运行、arm、takeoff、land的教程。如果你觉得示例不够多，<a href="https://github.com/mavlink/MAVSDK-Python/tree/main/examples%E9%87%8C%E9%9D%A2%E6%9C%89%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%AE%98%E6%96%B9%E7%A4%BA%E4%BE%8B%E3%80%82">https://github.com/mavlink/MAVSDK-Python/tree/main/examples里面有更多的官方示例。</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>南工御风</category>
      </categories>
      <tags>
        <tag>px4</tag>
        <tag>ubuntu</tag>
        <tag>mavsdk</tag>
        <tag>yolo</tag>
      </tags>
  </entry>
  <entry>
    <title>【飞控】01_安装、接线、连接地面站</title>
    <url>/2023/07/03/%E3%80%90%E9%A3%9E%E6%8E%A7%E3%80%9101-%E5%AE%89%E8%A3%85%E3%80%81%E6%8E%A5%E7%BA%BF%E3%80%81%E8%BF%9E%E6%8E%A5%E5%9C%B0%E9%9D%A2%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一-安装-接线-连接地面站"><a class="markdownIt-Anchor" href="#一-安装-接线-连接地面站"></a> 一. 安装、接线、连接地面站</h1>
<p>*<strong>PX4官网UserGuide地址（*</strong><a href="https://docs.px4.io/v1.12/en/">*<strong>https://docs.px4.io/v1.12/en/*</strong></a>*<strong>），强烈建议细读几遍*</strong></p>
<h2 id="接线"><a class="markdownIt-Anchor" href="#接线"></a> 接线</h2>
<p>详见<a href="https://docs.px4.io/v1.12/en/assembly/quick_start_cuav_v5_plus.html">PX4官网（以我们去年用的CUAV V5+为例）</a></p>
<p>或者<a href="https://doc.cuav.net/flight-controller/v5-autopilot/en/quick-start/quick-start-v5+.html">CUAV官网（以我们去年用的CUAV V5+为例）</a></p>
<p>或者去年的比赛机（物理观察）</p>
<ul>
<li><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517101925.png" alt="箱子" /></li>
<li><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517101949.png" alt="" /></li>
</ul>
<p>完成接线后，给飞行控制器（以下统称“飞控”）通电（使用3s锂电池或usb数据线），其大致情况应该如上图所示，飞控蓝灯闪烁、GPS蓝灯闪烁、数传绿灯慢闪（未连接），接下来可以连接地面站。</p>
<h2 id="qgroundcontrol地面站简称qgc"><a class="markdownIt-Anchor" href="#qgroundcontrol地面站简称qgc"></a> QGroundControl地面站（简称QGC）</h2>
<ul>
<li>
<p>PX4官方推荐地面站<a href="http://qgroundcontrol.com/">QGroundControl</a>，下载安装对应你的操作系统的QGC。</p>
</li>
<li>
<p>打开未连接飞机时如图</p>
<ul>
<li><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517102022.png" alt="" /></li>
</ul>
</li>
<li>
<p>连接飞机后如图</p>
<ul>
<li>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517102045.png" alt="" /></p>
</li>
<li>
<p>其中，左上角“Not Ready”代表飞行器现在的状态即未准备好，飞行器的状态按经验以及实操顺序可列为以下几种：</p>
<ul>
<li>Not Ready（黄色底色）：飞行器未准备就绪，有的操作未完成（比如RC遥控器未连接、飞机姿态错误（未水平放置）、空速管故障、GPS未搜到星等），无法ARM飞机。如你所见GPS未搜到星被打上了删除线，这是因为评价飞机是否Ready的参数是你可以调的，熟读参数表的你想必已经找到了(<a href="https://docs.px4.io/v1.12/en/advanced_config/parameter_reference.html#commander">https://docs.px4.io/v1.12/en/advanced_config/parameter_reference.html#commander</a>)（影响是否Ready的参数不止这些，如果你遇到了某些参数设置了但是没有达到预想的效果，请自行Google）</li>
<li>Ready To Fly（绿色底色）：飞行器已准备就绪，可以ARM。在ARM前，舵机可能会通电保持固定姿态（与固件版本有关），电机可能在你最开始上电时进行自我检测，但是均不会收到任何输入信号，拨动RC遥控器飞机不会做出反应。</li>
<li>Armed（绿色底色）：飞行器已经ARM，此时所有舵面、电机均可通过飞行控制器控制，飞机可以对RC遥控器的信号做出响应。</li>
<li><a href="https://docs.px4.io/v1.12/en/getting_started/flight_modes.html#manual-mode-fw">Manual</a>（绿色底色）：飞行器已经ARM，飞行模式为手动飞行模式，想必熟读PX4 User Guide的你对这些词并不陌生（<a href="https://docs.px4.io/v1.12/en/getting_started/flight_modes.html#px4-flight-modes-overview"><strong>PX4 Flight Modes Overview</strong></a>）。手动模式即没有自稳，RC信号直接控制飞机（在你所设置的pwm maxmimun minimun参数下）。</li>
<li><a href="https://docs.px4.io/v1.12/en/getting_started/flight_modes.html#stabilized-mode-fw">Stabilized</a>（绿色底色）：飞行器已经ARM，飞行模式为自稳飞行模式，飞行器会自动稳定飞机，此时的体验更像打游戏（）。</li>
<li>Mission（绿色底色）：飞行器已经ARM，飞行模式为任务飞行模式，飞行器会自动飞行前往设置的航点、航线，RC遥控器输入将不起作用，当任务结束后，飞行器默认会返回出发点上空100m盘旋（是否返回、盘旋高度、盘旋半径均可修改参数），如果飞手想要接管飞机，则需通过遥控器上的拨杆更改飞行模式到Manual或Stabilized，以结束Mission并夺回飞机控制权，当然，一般进行到这步不是结束就是结束了 : )</li>
<li>Hold（绿色底色）：飞行器已经ARM，飞行模式为保持飞行模式，飞行器会在当前位置上空盘旋，盘旋半径和高度可以通过参数自行设置。</li>
<li>Lost Connection（红色底色）：可能是这个名，造成这种状态有两种可能：
<ul>
<li>一是工作结束，收拾下班；</li>
<li>二是工作结束，收拾下班：
<ul>
<li><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517102100.png" alt="" /></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>依次点击左上角文字部分-&gt;ARM-&gt;滑动来arm（解锁）飞机</p>
<ul>
<li>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517102108.png" alt="" /></p>
</li>
<li>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517102116.png" alt="" /></p>
</li>
<li>
<p>如你所见Not Ready的情况下无法Arm飞机，具体原因也已给出（check orientations and recalibrate），这是因为我的gps是随便放置的，没有按照正常的安装方向向前摆放。更多and更详细的信息可以在这里看</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/20230517102124.png" alt="" /></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>南工御风</category>
      </categories>
      <tags>
        <tag>px4</tag>
        <tag>飞控</tag>
        <tag>qgc</tag>
      </tags>
  </entry>
  <entry>
    <title>修复内核更新失败导致的dkpg依赖错误</title>
    <url>/2023/08/15/%E4%BF%AE%E5%A4%8D%E5%86%85%E6%A0%B8%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E5%AF%BC%E8%87%B4%E7%9A%84dkpg%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="修复内核更新失败导致的-dpkg-依赖错误"><a class="markdownIt-Anchor" href="#修复内核更新失败导致的-dpkg-依赖错误"></a> 修复内核更新失败导致的 dpkg 依赖错误</h1>
<h2 id="第一步备份"><a class="markdownIt-Anchor" href="#第一步备份"></a> 第一步：备份</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv /var/lib/dpkg/info /var/lib/dpkg/info.bk</span><br></pre></td></tr></table></figure>
<h2 id="第二步新建"><a class="markdownIt-Anchor" href="#第二步新建"></a> 第二步：新建</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/lib/dpkg/info</span><br></pre></td></tr></table></figure>
<h2 id="第三步更新"><a class="markdownIt-Anchor" href="#第三步更新"></a> 第三步：更新</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure>
<h2 id="第四步替换"><a class="markdownIt-Anchor" href="#第四步替换"></a> 第四步：替换</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info.bk</span><br></pre></td></tr></table></figure>
<h2 id="第五步删除"><a class="markdownIt-Anchor" href="#第五步删除"></a> 第五步：删除</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/dpkg/info </span><br></pre></td></tr></table></figure>
<h2 id="第六步还原"><a class="markdownIt-Anchor" href="#第六步还原"></a> 第六步：还原</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv /var/lib/dpkg/info.bk /var/lib/dpkg/info </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>部署code-server让你在iPad上使用VScode</title>
    <url>/2022/12/07/%E9%83%A8%E7%BD%B2code-server%E8%AE%A9%E4%BD%A0%E5%9C%A8iPad%E4%B8%8A%E4%BD%BF%E7%94%A8VScode/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>所需材料: 一个可用的云服务器, iPad(任何能使用浏览器的电子设备)</p>
</blockquote>
<h1 id="在服务器部署code-server"><a class="markdownIt-Anchor" href="#在服务器部署code-server"></a> 在服务器部署code-server</h1>
<ol>
<li>
<p>以亚马逊aws免费服务器为例 (能白嫖为什么要花钱呢), 首先新建一个实例, 系统选择ubuntu</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207010335588.png" alt="image-20221207010335588" /></p>
<p>全部选择免费的即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207010436495.png" alt="image-20221207010436495" /></p>
</li>
<li>
<p>密钥对选项中, 如果没有密钥则点击创建新的密钥对, 记得保存密钥对文件. 创建完后选择新创建的密钥对.</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207010623627.png" alt="image-20221207010623627" /></p>
</li>
<li>
<p>网络设置先跳过, 后面在搞.</p>
</li>
<li>
<p>配置存储可以拉到30g(免费额度)</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207010725899.png" alt="image-20221207010725899" /></p>
</li>
<li>
<p>然后点击右下角启动示例即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207010758887.png" alt="image-20221207010758887" /></p>
</li>
<li>
<p>返回实例界面, 等待实例状态变为正在运行</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207010842108.png" alt="image-20221207010842108" /></p>
</li>
<li>
<p>选择该实例, 点击右上角的 连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207010940039.png" alt="image-20221207010940039" /></p>
</li>
<li>
<p>用户名使用默认的&quot;ubuntu&quot;即可, 然后点击连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207011016491.png" alt="image-20221207011016491" /></p>
</li>
<li>
<p>连接成功后, 首先设置root密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<p>设置服务器ssh允许密码连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config </span><br></pre></td></tr></table></figure>
<p>把PermitRootLogin 改为 yes</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207012222270.png" alt="image-20221207012222270" /></p>
<p>把PasswdAuthentication 改为 yes</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207012343695.png" alt="image-20221207012343695" /></p>
<p>保存退出</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207012359085.png" alt="image-20221207012359085" /></p>
</li>
<li>
<p>重启ssh服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置其安全组, 点击该实例, 在安全选项中, 点击安全组</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207011243835.png" alt="image-20221207011243835" /></p>
</li>
<li>
<p>点击编辑入站规则</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207011342082.png" alt="image-20221207011342082" /></p>
<p>然后按照如下配置即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207011407437.png" alt="image-20221207011407437" /></p>
<p>配置完成后点击保存规则.</p>
</li>
<li>
<p>现在可以试试能否ping通你的服务器公网ip</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207014404931.png" alt="image-20221207014404931" /></p>
<p>可以看出已经ping通了</p>
</li>
<li>
<p>现在你可以用你的任意ssh工具连接上服务器了, 这里用tabby举例</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207014543910.png" alt="image-20221207014543910" /></p>
</li>
<li>
<p>然后你就可以在这里部署你的code-server了, 首先切换到root用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - root</span><br></pre></td></tr></table></figure>
<p>运行一键安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure>
<p>安装成功后使用以下命令来启动code-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PASSWORD=<span class="string">&quot;123456&quot;</span> &amp;&amp; code-server --port 8888 --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里的 --port 8888已经在设置安全组时开启, 不然后面会无法连接.</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207013721614.png" alt="image-20221207013721614" /></p>
<p>如图, code-server已启动成功</p>
</li>
</ol>
<h1 id="使用ipad连接code-server"><a class="markdownIt-Anchor" href="#使用ipad连接code-server"></a> 使用iPad连接code-server</h1>
<ol start="15">
<li>
<p>打开你的iPad(或者其他任意可使用浏览器的设备), 打开safari转到 <a href="http://xn--ip-0p3cr1ft42fjbl:8888">http://你的公网ip:8888</a> , 进入该页面则说明已经连接成功.</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207014042210.png" alt="image-20221207014042210" /></p>
</li>
<li>
<p>输入第14步设置的PASSWORD即可进入主界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/hanhan3344/pic/note_pic/image-20221207014215268.png" alt="image-20221207014215268" /></p>
<p>可以像电脑vscode一样安装插件, 极大的解决了iPad coding难的问题.</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>云服务器</tag>
        <tag>code-server</tag>
      </tags>
  </entry>
</search>
